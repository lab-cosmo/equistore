initSidebarItems({"enum":[["Error","The possible sources of error in equistore"]],"fn":[["get_data_origin","Get the name of the given (pre-registered) origin"],["register_data_origin","Register a new data origin with the given `name`, or get the `DataOrigin` corresponding to this name if it was already registered."]],"mod":[["io",""],["labels",""],["tensor",""]],"struct":[["BasicBlock","Basic building block for `TensorMap`. A single basic block contains a n-dimensional array, and n sets of labels (one for each dimension). The sample labels are specific to this block, but component & property labels can be shared between blocks, or between values & gradients."],["EmptyArray","An implementation of the `Array` trait without any data. This only tracks the shape of the array."],["TensorBlock","A single block in a `TensorMap`, containing both values & optionally gradients of these values w.r.t. any relevant quantity."],["TensorBlockRefMut","Alternative to `&mut TensorBlock` allowing mutable access to the data, but not to modify the set of gradients or number of components in a block."],["eqs_array_t","`eqs_array_t` manages n-dimensional arrays used as data in a block or tensor map. The array itself if opaque to this library and can come from multiple sources: Rust program, a C/C++ program, a Fortran program, Python with numpy or torch. The data does not have to live on CPU, or even on the same machine where this code is executed."],["eqs_data_origin_t","A single 64-bit integer representing a data origin (numpy ndarray, rust ndarray, torch tensor, fortran array, â€¦)."],["eqs_sample_mapping_t","Representation of a single sample moved from an array to another one"]],"trait":[["Array","A rust trait with the same interface as `eqs_array_t`, see this struct for documentation on all methods."]],"type":[["DataOrigin",""]]});