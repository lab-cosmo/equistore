var searchIndex = JSON.parse('{\
"equistore":{"doc":"","t":[12,8,3,13,6,3,4,13,13,13,13,2,2,2,13,3,3,2,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,10,11,11,10,11,11,12,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,0,0,10,11,11,11,11,11,11,11,10,11,11,12,12,12,5,10,11,11,12,10,11,11,11,10,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,5,5,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","Array","BasicBlock","BufferSize","DataOrigin","EmptyArray","Error","External","Internal","InvalidParameter","Io","LabelValue","Labels","LabelsBuilder","Serialization","TensorBlock","TensorBlockRefMut","TensorMap","add_gradient","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","components","copy","copy","create","create","create","data","data","data","data","deref","drop","eq","eqs_array_t","eqs_data_origin_t","eqs_sample_mapping_t","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","get_data_origin","gradient","gradient","gradient_mut","gradient_parameters_c","gradients","gradients","gradients_mut","input","into","into","into","into","into","into","into","into","io","labels","move_samples_from","move_samples_from","move_samples_from","ne","new","new","new","new","origin","origin","origin","output","properties","ptr","register_data_origin","reshape","reshape","reshape","samples","shape","shape","shape","source","swap_axes","swap_axes","swap_axes","tensor","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values","values_mut","values_mut","0","0","0","0","0","context","status","load","save","FixedSizeIter","Iter","LabelValue","Labels","LabelsBuilder","add","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c_names","clone","clone","clone_into","clone_into","cmp","contains","contains","count","eq","eq","eq","equivalent","finish","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_hash","hash","i32","index","into","into","into","into","into","into_iter","into_iter","is_valid_label_name","isize","iter","iter_fixed_size","len","len","names","ne","ne","new","new","next","next","partial_cmp","position","reserve","single","size","size","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","usize","Iter","IterMut","TensorMap","block","block_matching","block_mut","blocks","blocks_matching","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","components_to_properties","fmt","from","from","from","into","into","into","into_iter","into_iter","iter","iter_mut","keys","keys_to_properties","keys_to_samples","len","len","new","next","next","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["equistore","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","equistore::Error","","","","","","","equistore::io","","equistore::labels","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","equistore::tensor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A rust trait with the same interface as <code>eqs_array_t</code>, see …","Basic building block for <code>TensorMap</code>. A single basic block …","A buffer passed to a C API function does not have the …","","An implementation of the <code>Array</code> trait without any data. …","The possible sources of error in equistore","External error, coming from a function used as a callback …","Any other internal error, usually these are internal bugs.","A function got an invalid parameter","I/O error when loading/writing <code>TensorMap</code> to a file","","","","Serialization format error when loading/writing <code>TensorMap</code> …","A single block in a <code>TensorMap</code>, containing both values &amp; …","Alternative to <code>&amp;mut TensorBlock</code> allowing mutable access to …","","Add a gradient with respect to <code>parameter</code> to this block.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new array with the same settings as this one and …","","","Get the underlying data for this array.","","","","","","<code>eqs_array_t</code> manages n-dimensional arrays used as data in a …","A single 64-bit integer representing a data origin (numpy …","Representation of a single sample moved from an array to …","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Get the name of the given (pre-registered) origin","Get the data and metadata for the gradient with respect to …","Get the data and metadata for the gradient with respect to …","Get read-write access to the data and metadata for the …","Get the list of gradients in this block for the C API","Get all gradients defined in this block","Get all gradients defined in this block","Get an iterator over all gradients defined in this block, …","index of the moved sample in the input array","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Set entries in <code>self</code> (the current array) taking data from …","","","Create an <code>eqs_array_t</code> from a Rust implementation of the …","Create a new <code>EmptyArray</code> with the given shape.","Create a new <code>BasicBlock</code>, validating the shape of data &amp; …","Create a new <code>TensorBlock</code> containing the given data, …","","Get the origin of this array","","index of the moved sample in the output array","","User-provided data should be stored here, it will be …","Register a new data origin with the given <code>name</code>, or get the …","","Set the shape of this array to the given new <code>shape</code>","","","","Get the shape of this array","","","","Swap the axes <code>axis_1</code> and <code>axis_2</code> in the dimensions of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the values data and metadata in this block","Get the values data and metadata in this block","Get read-write access to the values data and metadata in …","Get read-write access to the values data and metadata in …","","","","","","","","","","Iterator over entries in a set of <code>Labels</code> as fixed size …","iterator over <code>Labels</code> entries","A single value inside a label. This is represented as a …","A set of labels used to carry metadata associated with a …","Builder for <code>Labels</code>, this should be used to construct <code>Labels</code>…","Add a single <code>entry</code> to this set of labels.","","","","","","","","","","","Get the names of the entries/columns in this set of labels …","","","","","","Check if this <code>LabelBuilder</code> already contains the given <code>label</code>","Check whether the given <code>label</code> is part of this set of labels","Get the total number of entries in this set of labels","","","","","Finish building the <code>Labels</code>","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Get the integer value of this <code>LabelValue</code> as an i32","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Check if the given name is a valid identifier, to be used …","Get the integer value of this <code>LabelValue</code> as an isize","Iterate over the entries in this set of labels","Iterate over the entries in this set of labels as …","","","Get the names of the entries/columns in this set of labels","","","Create a new empty <code>LabelsBuilder</code> with the given <code>names</code>","Create a <code>LabelValue</code> with the given <code>value</code>","","","","Get the position (i.e. row index) of the given label in …","Reserve space for <code>additional</code> other entries in the labels.","Create a set of <code>Labels</code> containing a single entry, to be …","Get the number of labels in a single value","Get the number of entries/named values in a single label","","","","","","","","","","","","","","","","","","","Get the integer value of this <code>LabelValue</code> as a usize","Iterator over key/block pairs in a <code>TensorMap</code>","Iterator over key/block pairs in a <code>TensorMap</code>, with mutable …","A tensor map is the main user-facing struct of this …","Get a reference to the block matching the given selection.","Get the index of the single block matching the given …","Get read-write access to the block at the given index in …","Get the list of blocks in this <code>TensorMap</code>","Get the index of blocks matching the given selection.","","","","","","","","","Move the given variables from the component labels to the …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Get an iterator over the keys and associated blocks","Get an iterator over the keys and associated blocks, with …","Get the keys defined in this <code>TensorMap</code>","Merge blocks with the same value for selected keys …","Merge blocks with the same value for selected keys …","","","Create a new <code>TensorMap</code> with the given keys and blocks.","","","","","","","","","","","",""],"i":[1,0,0,2,0,0,0,2,2,2,2,0,0,0,2,0,0,0,3,4,5,4,5,6,5,7,1,8,9,3,2,6,5,7,1,8,9,3,2,6,1,8,9,3,6,1,8,9,3,9,4,5,4,6,5,4,6,5,9,7,6,1,0,0,0,1,6,1,8,9,3,2,2,6,6,5,7,1,8,9,3,2,2,2,0,7,3,7,3,7,3,7,8,6,5,7,1,8,9,3,2,0,0,4,6,5,1,6,5,9,3,4,6,5,8,9,6,0,4,6,5,9,4,6,5,2,4,6,5,0,6,1,8,9,3,2,6,5,7,1,8,9,3,2,6,5,7,1,8,9,3,2,6,5,7,1,8,9,3,2,7,3,7,3,10,11,12,13,14,15,15,0,0,0,0,0,0,0,16,16,17,18,19,20,16,17,18,19,20,20,19,20,19,20,19,16,20,20,19,19,20,19,16,19,19,20,16,17,18,19,19,19,19,19,20,19,19,19,20,16,17,18,19,20,17,18,0,19,20,20,17,18,20,19,20,16,19,17,18,19,20,16,20,16,20,19,20,19,16,17,18,19,20,16,17,18,19,20,16,17,18,19,20,19,0,0,0,21,21,21,21,21,22,23,21,22,23,21,21,21,21,21,22,23,21,22,23,21,22,23,21,21,21,21,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,21],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["str",0],["arc",3,[["labels",3]]],["vec",3,[["arc",3,[["labels",3]]]]]],["result",4,[["error",4]]]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["eqs_array_t",3]],[[["",0]],["eqs_data_origin_t",3]],[[["",0]],["eqs_sample_mapping_t",3]],[[["",0]],["basicblock",3]],[[["",0]],["tensorblock",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["result",4,[["eqs_array_t",3],["error",4]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]]],[[["",0]],["result",4,[["error",4]]]],[[["",0]]],null,[[["",0]]],[[["",0]]],[[["",0],["eqs_data_origin_t",3]],["bool",0]],null,null,null,[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",3]]],[[["box",3,[["any",8]]]],["error",4]],[[]],[[["dataorigin",6]],["string",3]],[[["",0],["str",0]],["option",4,[["basicblock",3]]]],[[["",0],["str",0]],["option",4,[["basicblock",3]]]],[[["",0],["str",0]],["option",4,[["basicblock",3]]]],[[["",0]]],[[["",0]],["hashmap",3]],[[["",0]],["hashmap",3]],[[["",0]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["",0],["array",8],["range",3,[["usize",0]]]]],[[["",0],["eqs_array_t",3],["range",3,[["usize",0]]]],["result",4,[["error",4]]]],[[["",0],["array",8],["range",3,[["usize",0]]]]],[[["",0],["eqs_data_origin_t",3]],["bool",0]],[[["box",3,[["array",8]]]],["eqs_array_t",3]],[[["vec",3,[["usize",0]]]],["emptyarray",3]],[[["eqs_array_t",3],["arc",3,[["labels",3]]],["vec",3,[["arc",3,[["labels",3]]]]],["arc",3,[["labels",3]]]],["result",4,[["basicblock",3],["error",4]]]],[[["arc",3,[["labels",3]]],["vec",3,[["arc",3,[["labels",3]]]]],["arc",3,[["labels",3]]]],["result",4,[["tensorblock",3],["error",4]]]],[[["",0]],["dataorigin",6]],[[["",0]],["result",4,[["eqs_data_origin_t",3],["error",4]]]],[[["",0]],["dataorigin",6]],null,null,null,[[["string",3]],["dataorigin",6]],[[["",0]]],[[["",0]],["result",4,[["error",4]]]],[[["",0]]],null,[[["",0]]],[[["",0]],["result",4,[["error",4]]]],[[["",0]]],[[["",0]],["option",4,[["error",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["result",4,[["error",4]]]],[[["",0],["usize",0],["usize",0]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["basicblock",3]],[[["",0]],["basicblock",3]],[[["",0]],["basicblock",3]],[[["",0]],["basicblock",3]],null,null,null,null,null,null,null,[[["",26,[["read",8],["seek",8]]]],["result",4,[["tensormap",3],["error",4]]]],[[["",26,[["write",8],["seek",8]]],["tensormap",3]],["result",4,[["error",4]]]],null,null,null,null,null,[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["labelvalue",3]],[[["",0]],["labels",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["labelvalue",3]],["ordering",4]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["",0],["labelvalue",3]],["bool",0]],[[["",0],["i32",0]],["bool",0]],[[["",0],["labels",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[],["labels",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["i32",0]],["labelvalue",3]],[[]],[[["u32",0]],["labelvalue",3]],[[["usize",0]],["labelvalue",3]],[[["isize",0]],["labelvalue",3]],[[]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[],["i32",0]],[[["",0],["usize",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",0]],["bool",0]],[[],["isize",0]],[[["",0]],["iter",3]],[[["",0]],["fixedsizeiter",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["vec",3,[["str",0]]]],[[["",0],["labelvalue",3]],["bool",0]],[[["",0],["labels",3]],["bool",0]],[[["vec",3,[["str",0]]]],["labelsbuilder",3]],[[["i32",0]],["labelvalue",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["labelvalue",3]],["option",4,[["ordering",4]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0],["usize",0]]],[[],["labels",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["usize",0]],null,null,null,[[["",0],["labels",3]],["result",4,[["tensorblock",3],["error",4]]]],[[["",0],["labels",3]],["result",4,[["usize",0],["error",4]]]],[[["",0],["usize",0]],["tensorblockrefmut",3]],[[["",0]]],[[["",0],["labels",3]],["result",4,[["vec",3,[["usize",0]]],["error",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["tensormap",3]],[[["",0],["",0]]],[[["",0]],["result",4,[["error",4]]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["iter",3]],[[["",0]],["itermut",3]],[[["",0]],["labels",3]],[[["",0],["labels",3],["bool",0]],["result",4,[["error",4]]]],[[["",0],["labels",3],["bool",0]],["result",4,[["error",4]]]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["labels",3],["vec",3,[["tensorblock",3]]]],["result",4,[["tensormap",3],["error",4]]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"eqs_data_origin_t"],[4,"Error"],[3,"TensorBlock"],[8,"Array"],[3,"EmptyArray"],[3,"eqs_array_t"],[3,"TensorBlockRefMut"],[3,"eqs_sample_mapping_t"],[3,"BasicBlock"],[13,"InvalidParameter"],[13,"BufferSize"],[13,"Io"],[13,"Serialization"],[13,"Internal"],[13,"External"],[3,"LabelsBuilder"],[3,"Iter"],[3,"FixedSizeIter"],[3,"LabelValue"],[3,"Labels"],[3,"TensorMap"],[3,"Iter"],[3,"IterMut"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};